#!/usr/bin/python

# TODO(nathanwiegand): Need to make it work with branches and commit numbers.
# TODO(nathanwiegand): Add license and descriptive comments.

import json
import os
import re
import shutil
import subprocess
import sys
import tempfile
import urllib

def get_fork_information(components):
    url = "https://github.com/api/v2/json/repos/show/%(user)s/%(project)s" \
          % components

    f = urllib.urlopen(url)
    if f.getcode() != 200:
        return {}
    response = json.loads(f.read())
    f.close()
    return response

def pull_from_head(repo_url, working_path):
    previous_dir = os.getcwd()
    os.chdir(working_path)

    command = "git clone --depth=1 %s" % repo_url
    process = subprocess.Popen(command.split(), stdout = sys.stdout,
                               stderr = sys.stdout)
    process.wait()
    os.chdir(previous_dir)

def read_url(url):
    # pull the new version
    f = urllib.urlopen(url)

    if f.getcode() != 200:
        return ""

    contents = f.read()
    f.close()
    return contents

def parse_github_path(path):
    components_regex = re.compile(
          "https://([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^#]+)#?(.*)$")

    components = components_regex.match(path)

    if components:
        return {
            'host': components.group(1),
            'user': components.group(2),
            'project': components.group(3),
            'github_view_type': components.group(4),
            'commit': components.group(5),
            'file': components.group(6),
            'line': components.group(7),
            'type': 'file'
        }
    components_regex = re.compile(
        "https://([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)$")
    components = components_regex.match(path)

    if components:
        return {
            'host': components.group(1),
            'user': components.group(2),
            'project': components.group(3),
            'tree': components.group(4),
            'branch': components.group(5),
            'type': 'branch'
        }

    components_regex = re.compile( "https://([^/]+)/([^/]+)/([^/]+)$")
    components = components_regex.match(path)

    if components:
        return {
            'host': components.group(1),
            'user': components.group(2),
            'project': components.group(3),
            'type': 'repo'
        }

def make_github_url(components):
    if components['type'] == 'file':
        return ("https://%(host)s/%(user)s/%(project)s/"
                "%(github_view_type)s/%(commit)s/%(file)s") % components
    else:
        return ("https://%(host)s/%(user)s/%(project)s/"
                "%(tree)s/%(branch)s") % components

def create_git_repo():
    print "Creating a git repo"
    path = tempfile.mkdtemp()
    previous_cwd = os.getcwd()
    os.chdir(path)

    subprocess.call("git init".split())
    return path

def write_file_and_commit(name, contents):
    print "Writing a file of %d bytes" % len(contents)
    o = open(name, 'w')
    print >> o, contents
    o.close()

    print "Committing new file to repo"

    command = "git add %s" % name
    subprocess.call(command.split())
    command = "git commit -am 'review'"
    subprocess.call(command.split())
    return True

def create_subdirectories(components, path):
    file_path = components["file"]
    dirs = os.path.dirname(file_path)

    # create the directory
    os.makedirs(dirs)
    os.chdir(path + "/" + dirs)

def pull_file_and_head_version(components, mainline_components, path):
    print "Copying %s" % components["file"]
    url = make_github_url(components)

    file_path = components["file"]
    file_name = os.path.basename(file_path)

    # pull the new version
    contents = read_url(url)

    # pull the mainline version
    mainline_url = make_github_url(mainline_components)

    mainline_contents = read_url(mainline_url)

    write_file_and_commit(file_name, mainline_contents)
    write_file_and_commit(file_name, contents)

def upload_to_codereview(mainline_components):
    command = ('git cl config https://github.com/%(user)s/%(project)s'
               '/raw/master/codereview.settings' % mainline_components)
    subprocess.call(command.split())

    command = 'git cl upload -m "review" HEAD^'
    subprocess.call(command.split())

def clean_up(path):
    print "Deleting %s" % path
    shutil.rmtree(path)

def pull_branches(components, mainline_components):
    mainline_url = 'git@github.com:%(user)s/%(project)s.git' % \
        mainline_components

    url = 'git@github.com:%(user)s/%(project)s.git' % components

    command = 'git pull %s master' % mainline_url
    subprocess.call(command.split())

    command = 'git pull %s master' % url
    subprocess.call(command.split())

def main(argv):
    if len(argv) != 2:
        print >> sys.stderr, "usage: vangough <url>"
        return 1

    if os.system('which git-cl') != 0:
        # This is not portable to Windows.
        print >> sys.stderr, "ERROR: git-cl not in path."
        return 1

    if os.system('which upload.py') != 0:
        print >> sys.stderr, "ERROR: upload.py not in path."
        return 1

    file_url = argv[1]
    components =  parse_github_path(file_url)

    fork_info = get_fork_information(components)
    mainline_components = components.copy()

    if 'repository' in fork_info and 'parent' in fork_info['repository']:
        user_project_regex = re.compile("([^/]+)/(.*)$")
        user_project = user_project_regex.match(
                fork_info['repository']['parent'])
        if not user_project:
            print "Couldn't parse response from github."
            return 1
        mainline_components['user'] = user_project.group(1)
        mainline_components['project'] = user_project.group(2)
        mainline_components['branch'] = 'master'
    else:
        print "vangogh only operates on projects which are forks."
        return 1
    repo_path = create_git_repo()

    if components['type'] == 'file':
        # Change the 'github_view_type' to 'raw' so that we get the raw file
        # instead of the github html marked up version.
        components['github_view_type'] = 'raw'
        create_subdirectories(components, repo_path)
        pull_file_and_head_version(components, mainline_components, repo_path)
        upload_to_codereview(mainline_components)
    elif components['type'] == 'branch' or components['type'] == 'repo':
        pull_branches(components, mainline_components)
        upload_to_codereview(mainline_components)
    clean_up(repo_path)

if __name__ == "__main__":
    sys.exit(main(sys.argv))
